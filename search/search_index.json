{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Freelens doc","text":"<p>Freelens is an open-source Kubernetes IDE designed to make it easier for developers and operators to work with Kubernetes clusters.</p> <p></p>"},{"location":"extensions/creating-an-extension/","title":"Creating an extension","text":""},{"location":"extensions/main/app-preferences/","title":"App preferences","text":""},{"location":"extensions/main/app-preferences/#what-is-apppreferences","title":"What is appPreferences?","text":"<p>App preferences allow you to add new menu entries to the global settings page. You can access this page by clicking the sandwich menu in the top-left corner and selecting <code>Preferences</code>. Alternatively, you can press <code>Ctrl + ,</code></p> <p>You will see the new component here</p>"},{"location":"extensions/main/app-preferences/#how-to-use-it","title":"How to use it","text":""},{"location":"extensions/main/app-preferences/#interface","title":"Interface","text":"<p>This is the appPreferences interface <pre><code>appPreferences: AppPreferenceRegistration[] = [];\n</code></pre></p> <p>AppPreferenceRegistration is defined as follows <pre><code>interface AppPreferenceRegistration {\n  title: string;\n  id?: string;\n  showInPreferencesTab?: string;\n  components: AppPreferenceComponents;\n}\n</code></pre></p>"},{"location":"extensions/main/app-preferences/#hands-on","title":"Hands on","text":"<p>To add a new setting menu entry in cluster settings just add this code of block to your <code>renderer/index.tsx</code> file</p> <pre><code>appPreferences = [\n  {\n    title: \"My Settings\",\n    components: {\n      Input: () =&gt; &lt;div&gt;HELLO!&lt;/div&gt;,\n      Hint: () =&gt; &lt;span&gt;Span message&lt;/span&gt;,\n    },\n  },\n];\n</code></pre> <p>After compiling and installing the plugin, remember to close Freelens from the tray icon and reopen it, or you won\u2019t see the new menu entries</p>"},{"location":"extensions/main/entity-settings/","title":"Entity settings","text":""},{"location":"extensions/main/entity-settings/#what-is-entitysettings","title":"What is entitySettings?","text":"<p>entitySettings allow you to add new menu entries inside the cluster settings page. You can access this page by right-clicking on your cluster and selecting <code>Settings</code>.</p> <p>You will see the new component here</p>"},{"location":"extensions/main/entity-settings/#how-to-use-it","title":"How to use it","text":""},{"location":"extensions/main/entity-settings/#interface","title":"Interface","text":"<p>This is the entitySettings interface <pre><code>entitySettings: EntitySettingRegistration[] = [];\n</code></pre></p> <p>EntitySettingRegistration is defined as follows <pre><code>interface EntitySettingRegistration {\n  apiVersions: string[];\n  kind: string;\n  title: string;\n  components: EntitySettingComponents;\n  source?: string;\n  id?: string;\n  priority?: number;\n  group?: string;\n}\n</code></pre></p>"},{"location":"extensions/main/entity-settings/#hands-on","title":"Hands on","text":"<p>To add a new setting menu entry in cluster settings just add this code of block to your <code>renderer/index.tsx</code> file</p> <pre><code>entitySettings = [\n  {\n    apiVersions: [\"entity.k8slens.dev/v1alpha1\"],\n    kind: \"KubernetesCluster\",\n    title: \"My settings\",\n    components: {\n      View: () =&gt; &lt;div&gt;HELLO!&lt;/div&gt;,\n    },\n    id: \"my-custom-cluster-settings\",\n    group: \"Settings\",\n  },\n];\n</code></pre> <p>After compiling and installing the plugin, remember to close Freelens from the tray icon and reopen it, or you won\u2019t see the new menu entries</p>"},{"location":"extensions/main/kube-object-detail-items/","title":"Kube object detail items","text":""},{"location":"extensions/main/kube-object-detail-items/#what-is-kubeobjectdetailitems","title":"What is kubeObjectDetailItems?","text":"<p>kubeObjectDetailItems allows you to add a custom component in the drawer panel of a resource like a <code>Pod</code> or an <code>Event</code>. You can see your component by clicking on a pod (or another supported resource kind) and scrolling to the bottom of the drawer.</p>"},{"location":"extensions/main/kube-object-detail-items/#how-to-use-it","title":"How to use it","text":""},{"location":"extensions/main/kube-object-detail-items/#interface","title":"Interface","text":"<p>This is the kubeObjectDetailItems interface</p> <pre><code>kubeObjectDetailItems: KubeObjectDetailRegistration[] = [];\n</code></pre> <p>KubeObjectDetailRegistration is defined as follows</p> <pre><code>export interface KubeObjectDetailRegistration&lt;T extends KubeObject = KubeObject&lt;KubeObjectMetadata&lt;KubeObjectScope&gt;, any, any&gt;,&gt; {\n  kind: string;\n  apiVersions: string[];\n  components: KubeObjectDetailComponents&lt;T&gt;;\n  priority?: number;\n  visible?: IComputedValue&lt;boolean&gt;;\n}\n</code></pre>"},{"location":"extensions/main/kube-object-detail-items/#hands-on","title":"Hands on","text":"<p>To add a new custom component in the drawer menu, let\u2019s create a new custom component.</p> <pre><code>import { Renderer } from \"@freelensapp/extensions\";\n\nimport styleInline from \"./example-details.scss?inline\";\nconst {\n  Component: { DrawerItem },\n} = Renderer;\n\ntype KubeObject = Renderer.K8sApi.KubeObject;\ntype KubeObjectDetailsProps&lt;TKubeObject extends KubeObject&gt; = Renderer.Component.KubeObjectDetailsProps&lt;TKubeObject&gt;;\n\nexport const ExampleDetails = ({ object }: KubeObjectDetailsProps&lt;Renderer.K8sApi.KubeObject&gt;) =&gt; {\n\n  return (\n    &lt;&gt;\n      &lt;style&gt;{styleInline}&lt;/style&gt;\n      &lt;div className=\"ExampleDetails\"&gt;\n        &lt;DrawerItem name=\"kind\"&gt;\n          { object.kind }\n        &lt;/DrawerItem&gt;\n        &lt;DrawerItem name=\"name\"&gt;\n          { object.metadata.name }\n        &lt;/DrawerItem&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>And then just add this block of code to your <code>renderer/index.tsx</code> file.</p> <pre><code>kubeObjectDetailItems = [\n  {\n    kind: \"Pod\",\n    apiVersions: [\"v1\"],\n    priority: 1,\n    components: {\n      Details: (props: KubeObjectDetailsProps&lt;Renderer.K8sApi.KubeObject&gt;) =&gt; &lt;ExampleDetails {...props} /&gt;,\n    },\n  },\n  {\n    kind: \"Event\",\n    apiVersions: [\"v1\"],\n    priority: 1,\n    components: {\n      Details: (props: KubeObjectDetailsProps&lt;Renderer.K8sApi.KubeObject&gt;) =&gt; &lt;ExampleDetails {...props} /&gt;,\n    },\n  },\n];\n</code></pre> <p>You can see all the properties of kubeObject here.</p>"},{"location":"extensions/main/lens-renderer-extension-class/","title":"LensRendererExtension class","text":"<p>The <code>LensRendererExtension</code> class extends the base <code>LensExtension</code> class and serves as a central place to register various UI components and features for a FreeLens extension. Each property in this class is an array that holds registrations for different types of UI elements or functionality. These registrations are then integrated into specific parts of the FreeLens UI. For example:</p> <pre><code>export class LensRendererExtension extends LensExtension {\n  globalPages: PageRegistration[] = [];\n  clusterPages: PageRegistration[] = [];\n  clusterPageMenus: ClusterPageMenuRegistration[] = [];\n  clusterFrameComponents: ClusterFrameChildComponent[] = [];\n  kubeObjectStatusTexts: KubeObjectStatusRegistration[] = [];\n  appPreferences: AppPreferenceRegistration[] = [];\n  appPreferenceTabs: AppPreferenceTabRegistration[] = [];\n  entitySettings: EntitySettingRegistration[] = [];\n  statusBarItems: StatusBarRegistration[] = [];\n  kubeObjectDetailItems: KubeObjectDetailRegistration[] = [];\n  kubeObjectMenuItems: KubeObjectMenuRegistration[] = [];\n  kubeWorkloadsOverviewItems: WorkloadsOverviewDetailRegistration[] = [];\n  commands: CommandRegistration[] = [];\n  welcomeMenus: WelcomeMenuRegistration[] = [];\n  catalogEntityDetailItems: CatalogEntityDetailRegistration&lt;CatalogEntity&gt;[] = [];\n  topBarItems: TopBarRegistration[] = [];\n  additionalCategoryColumns: AdditionalCategoryColumnRegistration[] = [];\n  customCategoryViews: CustomCategoryViewRegistration[] = [];\n  kubeObjectHandlers: KubeObjectHandlerRegistration[] = [];\n\n  ...\n}\n</code></pre> <p>Going further in the doc, you can find an example for each of these.</p>"},{"location":"blog/","title":"Blog","text":""}]}